{"mappings":"","sources":["src/js/ripples.js"],"sourcesContent":["/**\n * jQuery Ripples plugin v0.6.3 / https://github.com/sirxemic/jquery.ripples\n * MIT License\n * @author sirxemic / https://sirxemic.com/\n */\n\n\n\n(function (global, factory) {\n\t// typeof exports === 'object' && typeof module !== 'undefined' ? factory(require('jquery')) :\n\t// typeof define === 'function' && define.amd ? define(['jquery'], factory) :\n\t// (factory(global.$));\n}(this, (function ($) { 'use strict';\n\n$ = $ && 'default' in $ ? $['default'] : $;\n\nvar gl;\nvar $window = $(window); // There is only one window, so why not cache the jQuery-wrapped window?\n\nfunction isPercentage(str) {\n\treturn str[str.length - 1] == '%';\n}\n\n/**\n *  Load a configuration of GL settings which the browser supports.\n *  For example:\n *  - not all browsers support WebGL\n *  - not all browsers support floating point textures\n *  - not all browsers support linear filtering for floating point textures\n *  - not all browsers support rendering to floating point textures\n *  - some browsers *do* support rendering to half-floating point textures instead.\n */\nfunction loadConfig() {\n\tvar canvas = document.createElement('canvas');\n\tgl = canvas.getContext('webgl') || canvas.getContext('experimental-webgl');\n\n\tif (!gl) {\n\t\t// Browser does not support WebGL.\n\t\treturn null;\n\t}\n\n\t// Load extensions\n\tvar extensions = {};\n\t[\n\t\t'OES_texture_float',\n\t\t'OES_texture_half_float',\n\t\t'OES_texture_float_linear',\n\t\t'OES_texture_half_float_linear'\n\t].forEach(function(name) {\n\t\tvar extension = gl.getExtension(name);\n\t\tif (extension) {\n\t\t\textensions[name] = extension;\n\t\t}\n\t});\n\n\t// If no floating point extensions are supported we can bail out early.\n\tif (!extensions.OES_texture_float) {\n\t\treturn null;\n\t}\n\n\tvar configs = [];\n\n\tfunction createConfig(type, glType, arrayType) {\n\t\tvar name = 'OES_texture_' + type,\n\t\t\t\tnameLinear = name + '_linear',\n\t\t\t\tlinearSupport = nameLinear in extensions,\n\t\t\t\tconfigExtensions = [name];\n\n\t\tif (linearSupport) {\n\t\t\tconfigExtensions.push(nameLinear);\n\t\t}\n\n\t\treturn {\n\t\t\ttype: glType,\n\t\t\tarrayType: arrayType,\n\t\t\tlinearSupport: linearSupport,\n\t\t\textensions: configExtensions\n\t\t};\n\t}\n\n\tconfigs.push(\n\t\tcreateConfig('float', gl.FLOAT, Float32Array)\n\t);\n\n\tif (extensions.OES_texture_half_float) {\n\t\tconfigs.push(\n\t\t\t// Array type should be Uint16Array, but at least on iOS that breaks. In that case we\n\t\t\t// just initialize the textures with data=null, instead of data=new Uint16Array(...).\n\t\t\t// This makes initialization a tad slower, but it's still negligible.\n\t\t\tcreateConfig('half_float', extensions.OES_texture_half_float.HALF_FLOAT_OES, null)\n\t\t);\n\t}\n\n\t// Setup the texture and framebuffer\n\tvar texture = gl.createTexture();\n\tvar framebuffer = gl.createFramebuffer();\n\n\tgl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);\n\tgl.bindTexture(gl.TEXTURE_2D, texture);\n\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n\n\t// Check for each supported texture type if rendering to it is supported\n\tvar config = null;\n\n\tfor (var i = 0; i < configs.length; i++) {\n\t\tgl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 32, 32, 0, gl.RGBA, configs[i].type, null);\n\n\t\tgl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\n\t\tif (gl.checkFramebufferStatus(gl.FRAMEBUFFER) === gl.FRAMEBUFFER_COMPLETE) {\n\t\t\tconfig = configs[i];\n\t\t\tbreak;\n\t\t}\n\t}\n\n\treturn config;\n}\n\nfunction createImageData(width, height) {\n\ttry {\n\t\treturn new ImageData(width, height);\n\t}\n\tcatch (e) {\n\t\t// Fallback for IE\n\t\tvar canvas = document.createElement('canvas');\n\t\treturn canvas.getContext('2d').createImageData(width, height);\n\t}\n}\n\nfunction translateBackgroundPosition(value) {\n\tvar parts = value.split(' ');\n\n\tif (parts.length === 1) {\n\t\tswitch (value) {\n\t\t\tcase 'center':\n\t\t\t\treturn ['50%', '50%'];\n\t\t\tcase 'top':\n\t\t\t\treturn ['50%', '0'];\n\t\t\tcase 'bottom':\n\t\t\t\treturn ['50%', '100%'];\n\t\t\tcase 'left':\n\t\t\t\treturn ['0', '50%'];\n\t\t\tcase 'right':\n\t\t\t\treturn ['100%', '50%'];\n\t\t\tdefault:\n\t\t\t\treturn [value, '50%'];\n\t\t}\n\t}\n\telse {\n\t\treturn parts.map(function(part) {\n\t\t\tswitch (value) {\n\t\t\t\tcase 'center':\n\t\t\t\t\treturn '50%';\n\t\t\t\tcase 'top':\n\t\t\t\tcase 'left':\n\t\t\t\t\treturn '0';\n\t\t\t\tcase 'right':\n\t\t\t\tcase 'bottom':\n\t\t\t\t\treturn '100%';\n\t\t\t\tdefault:\n\t\t\t\t\treturn part;\n\t\t\t}\n\t\t});\n\t}\n}\n\nfunction createProgram(vertexSource, fragmentSource, uniformValues) {\n\tfunction compileSource(type, source) {\n\t\tvar shader = gl.createShader(type);\n\t\tgl.shaderSource(shader, source);\n\t\tgl.compileShader(shader);\n\t\tif (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\n\t\t\tthrow new Error('compile error: ' + gl.getShaderInfoLog(shader));\n\t\t}\n\t\treturn shader;\n\t}\n\n\tvar program = {};\n\n\tprogram.id = gl.createProgram();\n\tgl.attachShader(program.id, compileSource(gl.VERTEX_SHADER, vertexSource));\n\tgl.attachShader(program.id, compileSource(gl.FRAGMENT_SHADER, fragmentSource));\n\tgl.linkProgram(program.id);\n\tif (!gl.getProgramParameter(program.id, gl.LINK_STATUS)) {\n\t\tthrow new Error('link error: ' + gl.getProgramInfoLog(program.id));\n\t}\n\n\t// Fetch the uniform and attribute locations\n\tprogram.uniforms = {};\n\tprogram.locations = {};\n\tgl.useProgram(program.id);\n\tgl.enableVertexAttribArray(0);\n\tvar match, name, regex = /uniform (\\w+) (\\w+)/g, shaderCode = vertexSource + fragmentSource;\n\twhile ((match = regex.exec(shaderCode)) != null) {\n\t\tname = match[2];\n\t\tprogram.locations[name] = gl.getUniformLocation(program.id, name);\n\t}\n\n\treturn program;\n}\n\nfunction bindTexture(texture, unit) {\n\tgl.activeTexture(gl.TEXTURE0 + (unit || 0));\n\tgl.bindTexture(gl.TEXTURE_2D, texture);\n}\n\nfunction extractUrl(value) {\n\tvar urlMatch = /url\\([\"']?([^\"']*)[\"']?\\)/.exec(value);\n\tif (urlMatch == null) {\n\t\treturn null;\n\t}\n\n\treturn urlMatch[1];\n}\n\nfunction isDataUri(url) {\n\treturn url.match(/^data:/);\n}\n\nvar config = loadConfig();\nvar transparentPixels = createImageData(32, 32);\n\n// Extend the css\n$('head').prepend('<style>.jquery-ripples { position: relative; z-index: 0; }</style>');\n\n// RIPPLES CLASS DEFINITION\n// =========================\n\nvar Ripples = function (el, options) {\n\tvar that = this;\n\n\tthis.$el = $(el);\n\n\t// Init properties from options\n\tthis.interactive = options.interactive;\n\tthis.resolution = options.resolution;\n\tthis.textureDelta = new Float32Array([1 / this.resolution, 1 / this.resolution]);\n\n\tthis.perturbance = options.perturbance;\n\tthis.dropRadius = options.dropRadius;\n\n\tthis.crossOrigin = options.crossOrigin;\n\tthis.imageUrl = options.imageUrl;\n\n\t// Init WebGL canvas\n\tvar canvas = document.createElement('canvas');\n\tcanvas.width = this.$el.innerWidth();\n\tcanvas.height = this.$el.innerHeight();\n\tthis.canvas = canvas;\n\tthis.$canvas = $(canvas);\n\tthis.$canvas.css({\n\t\tposition: 'absolute',\n\t\tleft: 0,\n\t\ttop: 0,\n\t\tright: 0,\n\t\tbottom: 0,\n\t\tzIndex: -1\n\t});\n\n\tthis.$el.addClass('jquery-ripples').append(canvas);\n\tthis.context = gl = canvas.getContext('webgl') || canvas.getContext('experimental-webgl');\n\n\t// Load extensions\n\tconfig.extensions.forEach(function(name) {\n\t\tgl.getExtension(name);\n\t});\n\n\t// Auto-resize when window size changes.\n\tthis.updateSize = this.updateSize.bind(this);\n\t$(window).on('resize', this.updateSize);\n\n\t// Init rendertargets for ripple data.\n\tthis.textures = [];\n\tthis.framebuffers = [];\n\tthis.bufferWriteIndex = 0;\n\tthis.bufferReadIndex = 1;\n\n\tvar arrayType = config.arrayType;\n\tvar textureData = arrayType ? new arrayType(this.resolution * this.resolution * 4) : null;\n\n\tfor (var i = 0; i < 2; i++) {\n\t\tvar texture = gl.createTexture();\n\t\tvar framebuffer = gl.createFramebuffer();\n\n\t\tgl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);\n\n\t\tgl.bindTexture(gl.TEXTURE_2D, texture);\n\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, config.linearSupport ? gl.LINEAR : gl.NEAREST);\n\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, config.linearSupport ? gl.LINEAR : gl.NEAREST);\n\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n\t\tgl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, this.resolution, this.resolution, 0, gl.RGBA, config.type, textureData);\n\n\t\tgl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\n\n\t\tthis.textures.push(texture);\n\t\tthis.framebuffers.push(framebuffer);\n\t}\n\n\t// Init GL stuff\n\tthis.quad = gl.createBuffer();\n\tgl.bindBuffer(gl.ARRAY_BUFFER, this.quad);\n\tgl.bufferData(gl.ARRAY_BUFFER, new Float32Array([\n\t\t-1, -1,\n\t\t+1, -1,\n\t\t+1, +1,\n\t\t-1, +1\n\t]), gl.STATIC_DRAW);\n\n\tthis.initShaders();\n\tthis.initTexture();\n\tthis.setTransparentTexture();\n\n\t// Load the image either from the options or CSS rules\n\tthis.loadImage();\n\n\t// Set correct clear color and blend mode (regular alpha blending)\n\tgl.clearColor(0, 0, 0, 0);\n\tgl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);\n\n\t// Plugin is successfully initialized!\n\tthis.visible = true;\n\tthis.running = true;\n\tthis.inited = true;\n\tthis.destroyed = false;\n\n\tthis.setupPointerEvents();\n\n\t// Init animation\n\tfunction step() {\n\t\tif (!that.destroyed) {\n\t\t\tthat.step();\n\n\t\t\trequestAnimationFrame(step);\n\t\t}\n\t}\n\n\trequestAnimationFrame(step);\n};\n\nRipples.DEFAULTS = {\n\timageUrl: null,\n\tresolution: 256,\n\tdropRadius: 20,\n\tperturbance: 0.03,\n\tinteractive: true,\n\tcrossOrigin: ''\n};\n\nRipples.prototype = {\n\n\t// Set up pointer (mouse + touch) events\n\tsetupPointerEvents: function() {\n\t\tvar that = this;\n\n\t\tfunction pointerEventsEnabled() {\n\t\t\treturn that.visible && that.running && that.interactive;\n\t\t}\n\n\t\tfunction dropAtPointer(pointer, big) {\n\t\t\tif (pointerEventsEnabled()) {\n\t\t\t\tthat.dropAtPointer(\n\t\t\t\t\tpointer,\n\t\t\t\t\tthat.dropRadius * (big ? 1.5 : 1),\n\t\t\t\t\t(big ? 0.14 : 0.01)\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\t// Start listening to pointer events\n\t\tthis.$el\n\n\t\t\t// Create regular, small ripples for mouse move and touch events...\n\t\t\t.on('mousemove.ripples', function(e) {\n\t\t\t\tdropAtPointer(e);\n\t\t\t})\n\t\t\t.on('touchmove.ripples touchstart.ripples', function(e) {\n\t\t\t\tvar touches = e.originalEvent.changedTouches;\n\t\t\t\tfor (var i = 0; i < touches.length; i++) {\n\t\t\t\t\tdropAtPointer(touches[i]);\n\t\t\t\t}\n\t\t\t})\n\n\t\t\t// ...and only a big ripple on mouse down events.\n\t\t\t.on('mousedown.ripples', function(e) {\n\t\t\t\tdropAtPointer(e, true);\n\t\t\t});\n\t},\n\n\t// Load the image either from the options or the element's CSS rules.\n\tloadImage: function() {\n\t\tvar that = this;\n\n\t\tgl = this.context;\n\n\t\tvar newImageSource = this.imageUrl ||\n\t\t\textractUrl(this.originalCssBackgroundImage) ||\n\t\t\textractUrl(this.$el.css('backgroundImage'));\n\n\t\t// If image source is unchanged, don't reload it.\n\t\tif (newImageSource == this.imageSource) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.imageSource = newImageSource;\n\n\t\t// Falsy source means no background.\n\t\tif (!this.imageSource) {\n\t\t\tthis.setTransparentTexture();\n\t\t\treturn;\n\t\t}\n\n\t\t// Load the texture from a new image.\n\t\tvar image = new Image;\n\t\timage.onload = function() {\n\t\t\tgl = that.context;\n\n\t\t\t// Only textures with dimensions of powers of two can have repeat wrapping.\n\t\t\tfunction isPowerOfTwo(x) {\n\t\t\t\treturn (x & (x - 1)) == 0;\n\t\t\t}\n\n\t\t\tvar wrapping = (isPowerOfTwo(image.width) && isPowerOfTwo(image.height)) ? gl.REPEAT : gl.CLAMP_TO_EDGE;\n\n\t\t\tgl.bindTexture(gl.TEXTURE_2D, that.backgroundTexture);\n\t\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, wrapping);\n\t\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, wrapping);\n\t\t\tgl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, image);\n\n\t\t\tthat.backgroundWidth = image.width;\n\t\t\tthat.backgroundHeight = image.height;\n\n\t\t\t// Hide the background that we're replacing.\n\t\t\tthat.hideCssBackground();\n\t\t};\n\n\t\t// Fall back to a transparent texture when loading the image failed.\n\t\timage.onerror = function() {\n\t\t\tgl = that.context;\n\n\t\t\tthat.setTransparentTexture();\n\t\t};\n\n\t\t// Disable CORS when the image source is a data URI.\n\t\timage.crossOrigin = isDataUri(this.imageSource) ? null : this.crossOrigin;\n\n\t\timage.src = this.imageSource;\n\t},\n\n\tstep: function() {\n\t\tgl = this.context;\n\n\t\tif (!this.visible) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.computeTextureBoundaries();\n\n\t\tif (this.running) {\n\t\t\tthis.update();\n\t\t}\n\n\t\tthis.render();\n\t},\n\n\tdrawQuad: function() {\n\t\tgl.bindBuffer(gl.ARRAY_BUFFER, this.quad);\n\t\tgl.vertexAttribPointer(0, 2, gl.FLOAT, false, 0, 0);\n\t\tgl.drawArrays(gl.TRIANGLE_FAN, 0, 4);\n\t},\n\n\trender: function() {\n\t\tgl.bindFramebuffer(gl.FRAMEBUFFER, null);\n\n\t\tgl.viewport(0, 0, this.canvas.width, this.canvas.height);\n\n\t\tgl.enable(gl.BLEND);\n\t\tgl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n\n\t\tgl.useProgram(this.renderProgram.id);\n\n\t\tbindTexture(this.backgroundTexture, 0);\n\t\tbindTexture(this.textures[0], 1);\n\n\t\tgl.uniform1f(this.renderProgram.locations.perturbance, this.perturbance);\n\t\tgl.uniform2fv(this.renderProgram.locations.topLeft, this.renderProgram.uniforms.topLeft);\n\t\tgl.uniform2fv(this.renderProgram.locations.bottomRight, this.renderProgram.uniforms.bottomRight);\n\t\tgl.uniform2fv(this.renderProgram.locations.containerRatio, this.renderProgram.uniforms.containerRatio);\n\t\tgl.uniform1i(this.renderProgram.locations.samplerBackground, 0);\n\t\tgl.uniform1i(this.renderProgram.locations.samplerRipples, 1);\n\n\t\tthis.drawQuad();\n\t\tgl.disable(gl.BLEND);\n\t},\n\n\tupdate: function() {\n\t\tgl.viewport(0, 0, this.resolution, this.resolution);\n\n\t\tgl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffers[this.bufferWriteIndex]);\n\t\tbindTexture(this.textures[this.bufferReadIndex]);\n\t\tgl.useProgram(this.updateProgram.id);\n\n\t\tthis.drawQuad();\n\n\t\tthis.swapBufferIndices();\n\t},\n\n\tswapBufferIndices: function() {\n\t\tthis.bufferWriteIndex = 1 - this.bufferWriteIndex;\n\t\tthis.bufferReadIndex = 1 - this.bufferReadIndex;\n\t},\n\n\tcomputeTextureBoundaries: function() {\n\t\tvar backgroundSize = this.$el.css('background-size');\n\t\tvar backgroundAttachment = this.$el.css('background-attachment');\n\t\tvar backgroundPosition = translateBackgroundPosition(this.$el.css('background-position'));\n\n\t\t// Here the 'container' is the element which the background adapts to\n\t\t// (either the chrome window or some element, depending on attachment)\n\t\tvar container;\n\t\tif (backgroundAttachment == 'fixed') {\n\t\t\tcontainer = { left: window.pageXOffset, top: window.pageYOffset };\n\t\t\tcontainer.width = $window.width();\n\t\t\tcontainer.height = $window.height();\n\t\t}\n\t\telse {\n\t\t\tcontainer = this.$el.offset();\n\t\t\tcontainer.width = this.$el.innerWidth();\n\t\t\tcontainer.height = this.$el.innerHeight();\n\t\t}\n\n\t\t// TODO: background-clip\n\t\tif (backgroundSize == 'cover') {\n\t\t\tvar scale = Math.max(container.width / this.backgroundWidth, container.height / this.backgroundHeight);\n\n\t\t\tvar backgroundWidth = this.backgroundWidth * scale;\n\t\t\tvar backgroundHeight = this.backgroundHeight * scale;\n\t\t}\n\t\telse if (backgroundSize == 'contain') {\n\t\t\tvar scale = Math.min(container.width / this.backgroundWidth, container.height / this.backgroundHeight);\n\n\t\t\tvar backgroundWidth = this.backgroundWidth * scale;\n\t\t\tvar backgroundHeight = this.backgroundHeight * scale;\n\t\t}\n\t\telse {\n\t\t\tbackgroundSize = backgroundSize.split(' ');\n\t\t\tvar backgroundWidth = backgroundSize[0] || '';\n\t\t\tvar backgroundHeight = backgroundSize[1] || backgroundWidth;\n\n\t\t\tif (isPercentage(backgroundWidth)) {\n\t\t\t\tbackgroundWidth = container.width * parseFloat(backgroundWidth) / 100;\n\t\t\t}\n\t\t\telse if (backgroundWidth != 'auto') {\n\t\t\t\tbackgroundWidth = parseFloat(backgroundWidth);\n\t\t\t}\n\n\t\t\tif (isPercentage(backgroundHeight)) {\n\t\t\t\tbackgroundHeight = container.height * parseFloat(backgroundHeight) / 100;\n\t\t\t}\n\t\t\telse if (backgroundHeight != 'auto') {\n\t\t\t\tbackgroundHeight = parseFloat(backgroundHeight);\n\t\t\t}\n\n\t\t\tif (backgroundWidth == 'auto' && backgroundHeight == 'auto') {\n\t\t\t\tbackgroundWidth = this.backgroundWidth;\n\t\t\t\tbackgroundHeight = this.backgroundHeight;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tif (backgroundWidth == 'auto') {\n\t\t\t\t\tbackgroundWidth = this.backgroundWidth * (backgroundHeight / this.backgroundHeight);\n\t\t\t\t}\n\n\t\t\t\tif (backgroundHeight == 'auto') {\n\t\t\t\t\tbackgroundHeight = this.backgroundHeight * (backgroundWidth / this.backgroundWidth);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Compute backgroundX and backgroundY in page coordinates\n\t\tvar backgroundX = backgroundPosition[0];\n\t\tvar backgroundY = backgroundPosition[1];\n\n\t\tif (isPercentage(backgroundX)) {\n\t\t\tbackgroundX = container.left + (container.width - backgroundWidth) * parseFloat(backgroundX) / 100;\n\t\t}\n\t\telse {\n\t\t\tbackgroundX = container.left + parseFloat(backgroundX);\n\t\t}\n\n\t\tif (isPercentage(backgroundY)) {\n\t\t\tbackgroundY = container.top + (container.height - backgroundHeight) * parseFloat(backgroundY) / 100;\n\t\t}\n\t\telse {\n\t\t\tbackgroundY = container.top + parseFloat(backgroundY);\n\t\t}\n\n\t\tvar elementOffset = this.$el.offset();\n\n\t\tthis.renderProgram.uniforms.topLeft = new Float32Array([\n\t\t\t(elementOffset.left - backgroundX) / backgroundWidth,\n\t\t\t(elementOffset.top - backgroundY) / backgroundHeight\n\t\t]);\n\t\tthis.renderProgram.uniforms.bottomRight = new Float32Array([\n\t\t\tthis.renderProgram.uniforms.topLeft[0] + this.$el.innerWidth() / backgroundWidth,\n\t\t\tthis.renderProgram.uniforms.topLeft[1] + this.$el.innerHeight() / backgroundHeight\n\t\t]);\n\n\t\tvar maxSide = Math.max(this.canvas.width, this.canvas.height);\n\n\t\tthis.renderProgram.uniforms.containerRatio = new Float32Array([\n\t\t\tthis.canvas.width / maxSide,\n\t\t\tthis.canvas.height / maxSide\n\t\t]);\n\t},\n\n\tinitShaders: function() {\n\t\tvar vertexShader = [\n\t\t\t'attribute vec2 vertex;',\n\t\t\t'varying vec2 coord;',\n\t\t\t'void main() {',\n\t\t\t\t'coord = vertex * 0.5 + 0.5;',\n\t\t\t\t'gl_Position = vec4(vertex, 0.0, 1.0);',\n\t\t\t'}'\n\t\t].join('\\n');\n\n\t\tthis.dropProgram = createProgram(vertexShader, [\n\t\t\t'precision highp float;',\n\n\t\t\t'const float PI = 3.141592653589793;',\n\t\t\t'uniform sampler2D texture;',\n\t\t\t'uniform vec2 center;',\n\t\t\t'uniform float radius;',\n\t\t\t'uniform float strength;',\n\n\t\t\t'varying vec2 coord;',\n\n\t\t\t'void main() {',\n\t\t\t\t'vec4 info = texture2D(texture, coord);',\n\n\t\t\t\t'float drop = max(0.0, 1.0 - length(center * 0.5 + 0.5 - coord) / radius);',\n\t\t\t\t'drop = 0.5 - cos(drop * PI) * 0.5;',\n\n\t\t\t\t'info.r += drop * strength;',\n\n\t\t\t\t'gl_FragColor = info;',\n\t\t\t'}'\n\t\t].join('\\n'));\n\n\t\tthis.updateProgram = createProgram(vertexShader, [\n\t\t\t'precision highp float;',\n\n\t\t\t'uniform sampler2D texture;',\n\t\t\t'uniform vec2 delta;',\n\n\t\t\t'varying vec2 coord;',\n\n\t\t\t'void main() {',\n\t\t\t\t'vec4 info = texture2D(texture, coord);',\n\n\t\t\t\t'vec2 dx = vec2(delta.x, 0.0);',\n\t\t\t\t'vec2 dy = vec2(0.0, delta.y);',\n\n\t\t\t\t'float average = (',\n\t\t\t\t\t'texture2D(texture, coord - dx).r +',\n\t\t\t\t\t'texture2D(texture, coord - dy).r +',\n\t\t\t\t\t'texture2D(texture, coord + dx).r +',\n\t\t\t\t\t'texture2D(texture, coord + dy).r',\n\t\t\t\t') * 0.25;',\n\n\t\t\t\t'info.g += (average - info.r) * 2.0;',\n\t\t\t\t'info.g *= 0.995;',\n\t\t\t\t'info.r += info.g;',\n\n\t\t\t\t'gl_FragColor = info;',\n\t\t\t'}'\n\t\t].join('\\n'));\n\t\tgl.uniform2fv(this.updateProgram.locations.delta, this.textureDelta);\n\n\t\tthis.renderProgram = createProgram([\n\t\t\t'precision highp float;',\n\n\t\t\t'attribute vec2 vertex;',\n\t\t\t'uniform vec2 topLeft;',\n\t\t\t'uniform vec2 bottomRight;',\n\t\t\t'uniform vec2 containerRatio;',\n\t\t\t'varying vec2 ripplesCoord;',\n\t\t\t'varying vec2 backgroundCoord;',\n\t\t\t'void main() {',\n\t\t\t\t'backgroundCoord = mix(topLeft, bottomRight, vertex * 0.5 + 0.5);',\n\t\t\t\t'backgroundCoord.y = 1.0 - backgroundCoord.y;',\n\t\t\t\t'ripplesCoord = vec2(vertex.x, -vertex.y) * containerRatio * 0.5 + 0.5;',\n\t\t\t\t'gl_Position = vec4(vertex.x, -vertex.y, 0.0, 1.0);',\n\t\t\t'}'\n\t\t].join('\\n'), [\n\t\t\t'precision highp float;',\n\n\t\t\t'uniform sampler2D samplerBackground;',\n\t\t\t'uniform sampler2D samplerRipples;',\n\t\t\t'uniform vec2 delta;',\n\n\t\t\t'uniform float perturbance;',\n\t\t\t'varying vec2 ripplesCoord;',\n\t\t\t'varying vec2 backgroundCoord;',\n\n\t\t\t'void main() {',\n\t\t\t\t'float height = texture2D(samplerRipples, ripplesCoord).r;',\n\t\t\t\t'float heightX = texture2D(samplerRipples, vec2(ripplesCoord.x + delta.x, ripplesCoord.y)).r;',\n\t\t\t\t'float heightY = texture2D(samplerRipples, vec2(ripplesCoord.x, ripplesCoord.y + delta.y)).r;',\n\t\t\t\t'vec3 dx = vec3(delta.x, heightX - height, 0.0);',\n\t\t\t\t'vec3 dy = vec3(0.0, heightY - height, delta.y);',\n\t\t\t\t'vec2 offset = -normalize(cross(dy, dx)).xz;',\n\t\t\t\t'float specular = pow(max(0.0, dot(offset, normalize(vec2(-0.6, 1.0)))), 4.0);',\n\t\t\t\t'gl_FragColor = texture2D(samplerBackground, backgroundCoord + offset * perturbance) + specular;',\n\t\t\t'}'\n\t\t].join('\\n'));\n\t\tgl.uniform2fv(this.renderProgram.locations.delta, this.textureDelta);\n\t},\n\n\tinitTexture: function() {\n\t\tthis.backgroundTexture = gl.createTexture();\n\t\tgl.bindTexture(gl.TEXTURE_2D, this.backgroundTexture);\n\t\tgl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, 1);\n\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\n\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n\t},\n\n\tsetTransparentTexture: function() {\n\t\tgl.bindTexture(gl.TEXTURE_2D, this.backgroundTexture);\n\t\tgl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, transparentPixels);\n\t},\n\n\thideCssBackground: function() {\n\n\t\t// Check whether we're changing inline CSS or overriding a global CSS rule.\n\t\tvar inlineCss = this.$el[0].style.backgroundImage;\n\n\t\tif (inlineCss == 'none') {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.originalInlineCss = inlineCss;\n\n\t\tthis.originalCssBackgroundImage = this.$el.css('backgroundImage');\n\t\tthis.$el.css('backgroundImage', 'none');\n\t},\n\n\trestoreCssBackground: function() {\n\n\t\t// Restore background by either changing the inline CSS rule to what it was, or\n\t\t// simply remove the inline CSS rule if it never was inlined.\n\t\tthis.$el.css('backgroundImage', this.originalInlineCss || '');\n\t},\n\n\tdropAtPointer: function(pointer, radius, strength) {\n\t\tvar borderLeft = parseInt(this.$el.css('border-left-width')) || 0,\n\t\t\t\tborderTop = parseInt(this.$el.css('border-top-width')) || 0;\n\n\t\tthis.drop(\n\t\t\tpointer.pageX - this.$el.offset().left - borderLeft,\n\t\t\tpointer.pageY - this.$el.offset().top - borderTop,\n\t\t\tradius,\n\t\t\tstrength\n\t\t);\n\t},\n\n\t/**\n\t *  Public methods\n\t */\n\tdrop: function(x, y, radius, strength) {\n\t\tgl = this.context;\n\n\t\tvar elWidth = this.$el.innerWidth();\n\t\tvar elHeight = this.$el.innerHeight();\n\t\tvar longestSide = Math.max(elWidth, elHeight);\n\n\t\tradius = radius / longestSide;\n\n\t\tvar dropPosition = new Float32Array([\n\t\t\t(2 * x - elWidth) / longestSide,\n\t\t\t(elHeight - 2 * y) / longestSide\n\t\t]);\n\n\t\tgl.viewport(0, 0, this.resolution, this.resolution);\n\n\t\tgl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffers[this.bufferWriteIndex]);\n\t\tbindTexture(this.textures[this.bufferReadIndex]);\n\n\t\tgl.useProgram(this.dropProgram.id);\n\t\tgl.uniform2fv(this.dropProgram.locations.center, dropPosition);\n\t\tgl.uniform1f(this.dropProgram.locations.radius, radius);\n\t\tgl.uniform1f(this.dropProgram.locations.strength, strength);\n\n\t\tthis.drawQuad();\n\n\t\tthis.swapBufferIndices();\n\t},\n\n\tupdateSize: function() {\n\t\tvar newWidth = this.$el.innerWidth(),\n\t\t\t\tnewHeight = this.$el.innerHeight();\n\n\t\tif (newWidth != this.canvas.width || newHeight != this.canvas.height) {\n\t\t\tthis.canvas.width = newWidth;\n\t\t\tthis.canvas.height = newHeight;\n\t\t}\n\t},\n\n\tdestroy: function() {\n\t\tthis.$el\n\t\t\t.off('.ripples')\n\t\t\t.removeClass('jquery-ripples')\n\t\t\t.removeData('ripples');\n\n\t\t// Make sure the last used context is garbage-collected\n\t\tgl = null;\n\n\t\t$(window).off('resize', this.updateSize);\n\n\t\tthis.$canvas.remove();\n\t\tthis.restoreCssBackground();\n\n\t\tthis.destroyed = true;\n\t},\n\n\tshow: function() {\n\t\tthis.visible = true;\n\n\t\tthis.$canvas.show();\n\t\tthis.hideCssBackground();\n\t},\n\n\thide: function() {\n\t\tthis.visible = false;\n\n\t\tthis.$canvas.hide();\n\t\tthis.restoreCssBackground();\n\t},\n\n\tpause: function() {\n\t\tthis.running = false;\n\t},\n\n\tplay: function() {\n\t\tthis.running = true;\n\t},\n\n\tset: function(property, value) {\n\t\tswitch (property) {\n\t\t\tcase 'dropRadius':\n\t\t\tcase 'perturbance':\n\t\t\tcase 'interactive':\n\t\t\tcase 'crossOrigin':\n\t\t\t\tthis[property] = value;\n\t\t\t\tbreak;\n\t\t\tcase 'imageUrl':\n\t\t\t\tthis.imageUrl = value;\n\t\t\t\tthis.loadImage();\n\t\t\t\tbreak;\n\t\t}\n\t}\n};\n\n// RIPPLES PLUGIN DEFINITION\n// ==========================\n\nvar old = $.fn.ripples;\n\n$.fn.ripples = function(option) {\n\tif (!config) {\n\t\tthrow new Error('Your browser does not support WebGL, the OES_texture_float extension or rendering to floating point textures.');\n\t}\n\n\tvar args = (arguments.length > 1) ? Array.prototype.slice.call(arguments, 1) : undefined;\n\n\treturn this.each(function() {\n\t\tvar $this = $(this),\n\t\t\t\tdata = $this.data('ripples'),\n\t\t\t\toptions = $.extend({}, Ripples.DEFAULTS, $this.data(), typeof option == 'object' && option);\n\n\t\tif (!data && typeof option == 'string') {\n\t\t\treturn;\n\t\t}\n\t\tif (!data) {\n\t\t\t$this.data('ripples', (data = new Ripples(this, options)));\n\t\t}\n\t\telse if (typeof option == 'string') {\n\t\t\tRipples.prototype[option].apply(data, args);\n\t\t}\n\t});\n};\n\n$.fn.ripples.Constructor = Ripples;\n\n\n// RIPPLES NO CONFLICT\n// ====================\n\n$.fn.ripples.noConflict = function() {\n\t$.fn.ripples = old;\n\treturn this;\n};\n\n\n\n})));\n\n"],"names":[],"version":3,"file":"index.819f6898.js.map","sourceRoot":"/__parcel_source_root/"}